cmake_minimum_required(VERSION 3.12)
PROJECT(base LANGUAGES C CXX)

include(FindProtobuf)
find_package(Protobuf REQUIRED)
set(PROTOBUF_INPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../../../pb)
file(GLOB PROTOBUF_DEFINITION_FILES ${PROTOBUF_INPUT_DIRECTORY}/*.proto)
set(PROTOBUF_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/pb/protocol")

list(TRANSFORM PROTOBUF_DEFINITION_FILES
  REPLACE "([A-Za-z0-9\\.\\/]*\\/)?([A-Za-z0-9\\.]+)\\.proto" "${PROTOBUF_OUTPUT_DIRECTORY}/\\2.pb.cc"
  OUTPUT_VARIABLE PROTOBUF_OUTPUT_SRCS)
list(TRANSFORM PROTOBUF_DEFINITION_FILES
  REPLACE "([A-Za-z0-9\\.\\/]*\\/)?([A-Za-z0-9\\.]+)\\.proto" "${PROTOBUF_OUTPUT_DIRECTORY}/\\2.pb.h"
  OUTPUT_VARIABLE PROTOBUF_OUTPUT_HDRS)

add_custom_command(OUTPUT ${PROTOBUF_OUTPUT_SRCS} ${PROTOBUF_OUTPUT_HDRS}
  COMMAND pwd
  COMMAND protoc -I ${PROTOBUF_INPUT_DIRECTORY} --cpp_out=${PROTOBUF_OUTPUT_DIRECTORY} ${PROTOBUF_DEFINITION_FILES}
  WORKING_DIRECTORY ${PROTOBUF_INPUT_DIRECTORY}
  DEPENDS ${PROTOBUF_DEFINITION_FILES}
  COMMENT "Build protobuf"
  VERBATIM
)
add_custom_target(protobuf DEPENDS ${PROTOBUF_OUTPUT_SRCS})

AUX_SOURCE_DIRECTORY(./ SRC_LIST1)
set(SRC_LIST2 ${PROTOBUF_OUTPUT_SRCS} ${PROTOBUF_OUTPUT_HDRS})

configure_file(version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/version.h @ONLY)

find_package(jsoncpp CONFIG REQUIRED)
get_target_property(jsoncpp_INCLUDE_DIR jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)

add_library(base STATIC ${SRC_LIST1} ${SRC_LIST2})
target_compile_features(base PRIVATE cxx_std_11)
target_compile_definitions(base PRIVATE -D_REENTRANT -D_FILE_OFFSET_BITS=64 -DAC_HAS_INFO
  -DAC_HAS_WARNING -DAC_HAS_ERROR -DAC_HAS_CRITICAL -DTIXML_USE_STL
  -DAC_HAS_DEBUG -DLINUX_DAEMON)
target_include_directories(base PRIVATE pb/protocol ../ ${jsoncpp_INCLUDE_DIR} ${jsoncpp_INCLUDE_DIR}/jsoncpp)
add_dependencies(base protobuf)
